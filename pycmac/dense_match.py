#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 10 10:52:56 2019

@author: Ciaran Robb

A module which calls Micmac dense matching commands

This is just for convenince  to keep everything in python - MicMac has an
excellent command line

It does also georef the files

https://github.com/Ciaran1981/Sfm

@author: ciaran
"""

from subprocess import call
from os import path, chdir
import gdal
import re
import sys
from glob2 import glob
import osr
from pycmac.utilities import mask_raster_multi
from shutil import rmtree
from joblib import Parallel, delayed
import pandas as pd


def malt(folder, proj="30 +north", mode='Ortho', ext="JPG", orientation="Ground_UTM",
         DoOrtho='1',  DefCor='0', sub=None, **kwargs):
    
    """
    
    A function calling the Malt command for use in python 
            
    Notes
    -----------
    
    Purely for convenience within python - not  necessary - the mm3d cmd line
    is perfectly good
    
    
    see MicMac tools link for further possible kwargs - just put the module cmd as a kwarg
    The kwargs must be exactly the same case as the mm3d cmd options
    e.g = UseGpu='1'
    
    
        
    Parameters
    -----------
    
    folder : string
           working directory
    proj : string
           a UTM zone eg "30 +north" 
        
    mode : string
             Correlation mode - Ortho, UrbanMNE, GeomImage
        
    ext : string
                 image extention e.g JPG, tif
    
    orientation : string
                 orientation folder to use (generated by previous tools/cmds)
                 default is "Ground_UTM"
    
       
    """
    
    if sub != None:
        extFin = _subset(folder, sub, ext=ext)
    else:
        extFin = '.*'+ext

    
    mlog = open(path.join(folder, 'Maltlog.txt'), "w")    
    
    cmd = ['mm3d', 'Malt', mode, extFin, orientation, 'DoOrtho='+DoOrtho,
           'DefCor='+DefCor, 'EZA=1']  
    
    if kwargs != None:
        for k in kwargs.items():
            oot = re.findall(r'\w+',str(k))
            anArg = oot[0]+'='+oot[1]
            cmd.append(anArg)
            
            
        
        
    chdir(folder)
    
      
    ret = call(cmd, stdout=mlog)
    
    if ret !=0:
        print('A micmac error has occured - check the log file')
        sys.exit()
        
    
    
    
    dsmF = path.join(folder, 'MEC-Malt', '*Z_Num*_DeZoom*_STD-MALT.tif*')
    
    zedS = glob(dsmF)
   
    
    
    projF = "+proj=utm +zone="+proj+"+ellps=WGS84 +datum=WGS84 +units=m +no_defs"
    
    # georef the DEMs - by georeffing them all we eliminate having to decide which one
    [_set_dataset_config(z, projF, FMT = 'Gtiff') for z in zedS]
    
    # Now to mask the last zoom -level raster
    img = zedS[-1]
    
    # want the lower number
    digit = re.findall('\d+', img)
    digit.sort()

    maskstr = "Masq_STD-MALT_DeZoom"+digit[0]+".tif"
    mask_ras = path.join(folder, 'MEC-Malt', maskstr)
    mask_raster_multi(img, mask=mask_ras) 
    
    
#    
def pims(folder, mode='BigMac', ext="JPG", orientation="Ground_UTM",  
         DefCor='0', sub=None, **kwargs):
    """
    
    A function calling the PIMs command for use in python 
            
    Notes
    -----------
    
    Purely for convenience within python - not  necessary - the mm3d cmd line
    is perfectly good
    
    
    see MicMac tools link for further possible args - just put the module cmd as a kwarg
    The kwargs must be exactly the same case as the mm3d cmd options
    
    
        
    Parameters
    -----------
    
    folder : string
           working directory
           
    proj : string
           a proj4/gdal like projection information e.g ESPG:32360
        
    mode : string
             Correlation mode - MicMac, BigMac, QuickMac, Forest, Statue
             Default is BigMac
        
    ext : string
                 image extention e.g JPG, tif
    
    orientation : string
                 orientation folder to use (generated by previous tools/cmds)
                 default is "Ground_UTM"
    
    e.g = UseGpu='1'  
    """
    
    if sub != None:
        extFin = _subset(folder, sub, ext=ext)
    else:
        extFin = '.*'+ext
    
    mlog = open(path.join(folder, 'Maltlog.txt'), "w")    
    
    cmd = ['mm3d', 'PIMs', mode, extFin, orientation, 'DefCor='+DefCor]  
    
    if kwargs != None:
        for k in kwargs.items():
            oot = re.findall(r'\w+',str(k))
            anArg = oot[0]+'='+oot[1]
            cmd.append(anArg)
            
            
        
        
    chdir(folder)
    
      
    ret = call(cmd, stdout=mlog)
    
    if ret !=0:
        print('A micmac error has occured - check the log file')
        sys.exit() 
    
    if mode == 'Forest':
        pishList = [path.join(folder, 'PIMs-TmpBasc'),
                    path.join(folder, 'PIMs-ORTHO'),
                    path.join(folder, 'PIMs-TmpMnt'),
                    path.join(folder, 'PIMs-TmpMntOrtho')]
        
        Parallel(n_jobs=-1, verbose=5)(delayed(rmtree)(pish) for pish in pishList)
#    
#    
def pims2mnt(folder, proj="30 +north", mode='BigMac',  DoOrtho='1',  **kwargs):
    """
    
    A function calling the PIMs2MNT command for use in python 
            
    Notes
    -----------
    
    Purely for convenience within python - not  necessary - the mm3d cmd line
    is perfectly good
    
    
    see MicMac tools link for further possible args - just put the module cmd as a kwarg
    The kwargs must be exactly the same case as the mm3d cmd options
    
    
        
    Parameters
    -----------
    
    folder : string
           working directory
           
    proj : string
           a proj4/gdal like projection information e.g "ESPG:32360"
        
    mode : string
             Correlation folder to grid/rectify - MicMac, BigMac, QuickMac, Forest, Statue
             Default is BigMac
        

    
       
    """
    
    
    mlog = open(path.join(folder, 'PIMslog.txt'), "w")    
    
    cmd = ['mm3d', 'PIMs2MNT', mode, 'DoOrtho='+DoOrtho]  
    
    if kwargs != None:
        for k in kwargs.items():
            oot = re.findall(r'\w+',str(k))
            anArg = oot[0]+'='+oot[1]
            cmd.append(anArg)
            
            
        
        
    chdir(folder)
    
      
    ret = call(cmd, stdout=mlog)
    
    if ret !=0:
        print('A micmac error has occured - check the log file')
        sys.exit()
    
    dsmF = (folder, 'PIMs-Tmp-Basc', 'PIMs-Merged-Prof.tif')
    
    # georef the DEM
    _set_dataset_config(dsmF, proj, FMT = 'Gtiff')

def tawny(folder, proj="30 +north", mode='PIMs', **kwargs):

    """
    
    A function calling the PIMs2MNT command for use in python 
            
    Notes
    -----------
    
    Purely for convenience within python - not  necessary - the mm3d cmd line
    is perfectly good
    
    see MicMac tools link for further possible args - just put the module cmd as a kwarg
    The kwargs must be exactly the same case as the mm3d cmd options
    
    
        
    Parameters
    -----------
    
    folder : string
           working directory
           
    proj : string
           a proj4/gdal like projection information e.g "ESPG:32360"
        
    mode : string
             Correlation folder to grid/rectify - MicMac, BigMac, QuickMac, Forest, Statue
             Default is BigMac
        

    
       
    """
    
    if mode == 'PIMs':
        ootFolder = 'PIMs-ORTHO'
    elif mode == 'Malt':
        ootFolder = 'Ortho-MEC-Malt'
    
    mlog = open(path.join(folder, 'Tawnylog.txt'), "w")    
    
    cmd = ['mm3d', 'Tawny', mode]  
    
    if kwargs != None:
        for k in kwargs.items():
            oot = re.findall(r'\w+',str(k))
            anArg = oot[0]+'='+oot[1]
            cmd.append(anArg)
            
            
        
        
    chdir(folder)
    
      
    ret = call(cmd, stdout=mlog)

    if ret !=0:
        print('A micmac error has occured - check the log file')
        sys.exit()
    
    
    orthF = (folder, ootFolder, "Orthophotomosaic.tif") 
    
    _set_dataset_config(orthF, proj, FMT = 'Gtiff')

def feather(folder, proj="ESPG:32360", mode='PIMs', ApplyRE="1", **kwargs):

    """
    
    A function calling the TestLib SeamlineFeathering command for use in python 
            
    Notes
    -----------
    
    Purely for convenience within python - not  necessary - the mm3d cmd line
    is perfectly good
    
    see MicMac tools link for further possible args - just put the module cmd as a kwarg
    The kwargs must be exactly the same case as the mm3d cmd options
    
    
        
    Parameters
    -----------
    
    folder : string
           working directory
           
    proj : string
           a proj4/gdal like projection information e.g "ESPG:32360"
        
    mode : string
             Ortho folder use either PIMs or Malt here
        

    
       
    """
    if mode == 'PIMs':
        ootFolder = 'PIMs-ORTHO'
    elif mode == 'Malt':
        ootFolder = 'Ortho-MEC-Malt'
    
    imList = glob(path.join(folder, ootFolder, "*Ort_*.tif"))
    imList.sort()
    
    mlog = open(path.join(folder, 'SeamLog.txt'), "w")  
    
    subList = [path.split(item)[1] for item in imList]
    
    subStr = str(subList)
    
    sub2 = subStr.replace("[", "")
    sub2 = sub2.replace("]", "")
    sub2 = sub2.replace("'", "") 
    sub2 = sub2.replace(", ", "|")      
    
    chdir(path.join(folder, ootFolder))   
    
    cmd = ["mm3d", "TestLib", "SeamlineFeathering", '"'+sub2+'"',
           "ApplyRE="+ApplyRE,  "Out=SeamMosaic.tif"]
    
    if kwargs != None:
        for k in kwargs.items():
            oot = re.findall(r'\w+',str(k))
            anArg = oot[0]+'='+oot[1]
            cmd.append(anArg)      
    

    
    ret = call(cmd, stdout=mlog)

    if ret !=0:
        print('A micmac error has occured - check the log file')
        sys.exit()
    
    orthF = path.join(folder, ootFolder, "SeamMosaic.tif")
    _set_dataset_config(path.abspath(orthF), proj, FMT = 'Gtiff')
    
    chdir(folder)

        
def _set_dataset_config(inRas, projection, FMT = 'Gtiff'):
                         #dtype = gdal.GDT_CFloat64, bands = 1):
    """sets projection in dataset.

    """
    
    inDataset = gdal.Open(inRas, gdal.GA_Update)

    sr = osr.SpatialReference() 
    
    sr.ImportFromProj4(projection)
    # must be this for a geotiff
    wkt = sr.ExportToWkt()
    inDataset.SetProjection(wkt)
    
    inDataset.FlushCache()

def _subset(folder, csv, ext="JPG"):
    
    """
    
    A function for passing a subset to Malt or PIMS
            
    Notes
    -----------
    
    Purely for convenience within python - not really necessary - 
    
    
    see MicMac tools link for further possible kwargs - just put the module cmd as a kwarg
    
    
    
        
    Parameters
    -----------
    
    folder : string
           working directory
    proj : string
           a UTM zone eg "30 +north" 
        
    mode : string
             Correlation mode - Ortho, UrbanMNE, GeomImage
        
    ext : string
                 image extention e.g JPG, tif
    
    orientation : string
                 orientation folder to use (generated by previous tools/cmds)
                 default is "Ground_UTM"
    
       
    """

    
    
    dF = pd.read_table(csv)
    
    imList = list(dF['#F=N'])
    imList.sort()
    
    
    #subList = [path.split(item)[1] for item in imList]
    
    subStr = str(imList)
    
    sub2 = subStr.replace("[", "")
    sub2 = sub2.replace("]", "")
    sub2 = sub2.replace("'", "") 
    sub2 = sub2.replace(", ", "|")                 
    
    return sub2